package com.example.lmtapp;import android.app.DatePickerDialog;import android.app.DownloadManager;import android.content.Intent;import android.content.res.ColorStateList;import android.graphics.Bitmap;import android.net.Uri;import android.os.Build;import android.os.Bundle;import android.provider.MediaStore;import android.util.Base64;import android.util.Log;import android.view.View;import android.widget.Button;import android.widget.EditText;import android.widget.ImageView;import android.widget.Toast;import androidx.annotation.RequiresApi;import androidx.appcompat.app.AppCompatActivity;import androidx.core.content.ContextCompat;import com.android.volley.DefaultRetryPolicy;import com.android.volley.Request;import com.android.volley.RequestQueue;import com.android.volley.Response;import com.android.volley.VolleyError;import com.android.volley.toolbox.StringRequest;import com.android.volley.toolbox.Volley;import org.json.JSONObject;import java.io.ByteArrayOutputStream;import java.io.IOException;import java.io.InputStream;import java.util.ArrayList;import java.util.Calendar;import java.util.HashMap;import java.util.Map;import static android.webkit.ConsoleMessage.MessageLevel.LOG;import static java.lang.Integer.*;public class registration extends AppCompatActivity {    EditText editTextDate ;    DatePickerDialog.OnDateSetListener onDateSetListener;    private ImageView ProfileImage;    private static final int PICK_IMAGE = 1;    Uri imageUri;    String encodedImage;    //database    private  String insertionUrl = "https://hellorandroid.000webhostapp.com/android_phpcon/signup.php";    private RequestQueue requestQueue;    private static final String TAG= registration.class.getSimpleName();    int success;    private  String TAG_SUCCESS = "success";    private  String TAG_MESSAGE = "message";    private  String tag_json_obj= "json_obj_req";    ArrayList<String> db_usernames = new ArrayList<>();    EditText fn,num,adrs,emls,usr,pas;    Button save;    @RequiresApi(api = Build.VERSION_CODES.LOLLIPOP)    @Override    protected void onCreate(Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        setContentView(R.layout.activity_registration);        //date        editTextDate = findViewById(R.id.reg_edtBday);        fn = findViewById(R.id.reg_edtFn);        num = findViewById(R.id.reg_edtNum);        adrs = findViewById(R.id.reg_edtAdres);        emls = findViewById(R.id.reg_edtEml);        usr = findViewById(R.id.reg_edtUname);        pas = findViewById(R.id.reg_edtPword);        save = findViewById(R.id.reg_btnDone);        save.setOnClickListener(v -> {            Toast.makeText(getApplicationContext(), "Please wait", Toast.LENGTH_SHORT).show();                    sendData();                }        );        usr.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View v) {                ColorStateList colorStateList = ColorStateList.valueOf(ContextCompat.getColor(registration.this,R.color.black));                usr.setBackgroundTintList(colorStateList);            }        });        editTextDate.setOnClickListener(v -> {            Calendar calendar = Calendar.getInstance();            int year = calendar.get(Calendar.YEAR);            int month = calendar.get(Calendar.MONTH);            int day = calendar.get(Calendar.DAY_OF_MONTH);            DatePickerDialog datePickerDialog = new DatePickerDialog(registration.this, onDateSetListener, year, month, day);            datePickerDialog.show();        });        onDateSetListener = (view, year, month, dayOfMonth) -> {            month = month + 1;            String date = dayOfMonth + "/" + month + "/" + year;            editTextDate.setText(date);        };        //profile picture        ProfileImage = findViewById(R.id.reg_imgBrowse);        ProfileImage.setOnClickListener(v -> {            Intent gallery = new Intent();            gallery.setType("image/*");            gallery.setAction(Intent.ACTION_GET_CONTENT);            startActivityForResult(Intent.createChooser(gallery, "Select Picture"), PICK_IMAGE);        });//end of profile picture    }//end of onCreate    @Override    public void onBackPressed() {        Intent intent = new Intent(this,MainActivity.class);        startActivity(intent);        finish();    }    @Override    protected void onActivityResult(int requestCode, int resultCode, Intent data) {        super.onActivityResult(requestCode, resultCode, data);        if (requestCode == PICK_IMAGE && resultCode == RESULT_OK && data != null) {            imageUri = data.getData();            try {                Bitmap bitmap = MediaStore.Images.Media.getBitmap(getContentResolver(), imageUri);                ProfileImage.setImageBitmap(bitmap);                Log.d( "msg",String.valueOf(imageUri));                Log.d( "msg1",bitmap.toString());                imageStore(bitmap);            } catch (IOException e) {                e.printStackTrace();            }        }    }    private void imageStore(Bitmap bitmap) {        ByteArrayOutputStream stream =  new ByteArrayOutputStream();        bitmap.compress(Bitmap.CompressFormat.JPEG,100,stream);        byte[]  imagebytes =  stream.toByteArray();        encodedImage = android.util.Base64.encodeToString(imagebytes, Base64.DEFAULT);    }    private void sendData(){            StringRequest stringRequest = new StringRequest(Request.Method.POST, insertionUrl, new Response.Listener<String>() {                @Override                public void onResponse(String response) {                    try {                        JSONObject jsonObject = new JSONObject(response);                        String success = jsonObject.getString("success");                        if (success.equals("1")) {                            fn.setText("");                            num.setText("");                            adrs.setText("");                            emls.setText("");                            editTextDate.setText("");                            usr.setText("");                            pas.setText("");                            Toast.makeText(registration.this,"Registration Successfull", Toast.LENGTH_SHORT).show();                            Intent intent = new Intent(registration.this,MainActivity.class);                            startActivity(intent);                            finish();                        } else {                            Toast.makeText(registration.this,"Registration Failed" +  "\n" + response, Toast.LENGTH_SHORT).show();                        }                    }catch (Exception e){                        Toast.makeText(registration.this, "Error Occured " + e, Toast.LENGTH_SHORT).show();                    }                }            }, new Response.ErrorListener() {                @Override                public void onErrorResponse(VolleyError error) {                    Toast.makeText(registration.this, "error on responce Volley Error " + error.getMessage(), Toast.LENGTH_LONG).show();                }            }){                public  Map<String , String> getParams(){                    Map<String, String> params = new HashMap<String, String>();                    params.put("usr_code", num.getText().toString());                    params.put("usr_fullname", fn.getText().toString());                    params.put("usr_cpnumber", num.getText().toString());                    params.put("usr_address", adrs.getText().toString());                    params.put("usr_birthdate", editTextDate.getText().toString());                    params.put("usr_emailadd", emls.getText().toString());                    params.put("usr_username", usr.getText().toString());                    params.put("usr_password", pas.getText().toString());                    params.put("usr_image",encodedImage);                    Log.d("sd",encodedImage);                    return  params;                }            };        requestQueue = Volley.newRequestQueue(registration.this);           stringRequest.setRetryPolicy(new DefaultRetryPolicy(10000,1,1.0f));            requestQueue.add(stringRequest);        }    }